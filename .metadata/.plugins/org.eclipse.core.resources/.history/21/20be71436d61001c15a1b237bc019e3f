package com.accessProject.footballManager;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Date;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.accessProject.footballManager.data.FootballManagerRepository;
import com.accessProject.footballManager.data.FootballTeamEntity;
import com.accessProject.footballManager.services.FootballManagerServiceImp;
import com.accessProject.footballManager.shared.FootballTeamDto;

@SuppressWarnings("unchecked")
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
@SpringBootTest
class FootballManagerApplicationTests {

	@InjectMocks
	FootballManagerServiceImp footballManagerService;
	
	@Mock
	FootballManagerRepository footballManagerRepository;
	
	private FootballTeamDto newTeam = new FootballTeamDto();
	
	@BeforeEach
	void testInitialization() {
		footballManagerService = new FootballManagerServiceImp();
		
		newTeam.setNombre("Real Madrid");		
		newTeam.setCiudad("Madrid");
		newTeam.setPropietario("Florentino");
		newTeam.setDivision(1);
		newTeam.setCompeticion("Liga");
		newTeam.setNumJugadores(22);
		newTeam.setCapacidad(60000);
		newTeam.setFechaCreacion(new Date());
	}

	@Nested
	class createTeamResponse{
		@Test
		void shouldCallSaveFromRepository_WhenValidTeamIsCreated() {
			ModelMapper modelMapper = new ModelMapper();
			modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
			FootballTeamEntity footballTeamEntity = modelMapper.map(newTeam, FootballTeamEntity.class);
			
			when(footballManagerRepository.save(footballTeamEntity)).thenReturn(footballTeamEntity);
			ResponseEntity<FootballTeamDto> response = (ResponseEntity<FootballTeamDto>) footballManagerService.createTeam(newTeam);
			System.out.println(response);
			verify(footballManagerRepository, times(1)).save(footballTeamEntity);
			//assertEquals(response, new ResponseEntity<>(footballTeamEntity, HttpStatus.OK));
		}
	}
	
	@Test
	void shouldReturnOneTeam_WhenValidTeamNameIsProvided() {
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		FootballTeamEntity footballTeamEntity = modelMapper.map(newTeam, FootballTeamEntity.class);
		System.out.println(newTeam.getNombre());
		when(footballManagerRepository.save(footballTeamEntity)).thenReturn(footballTeamEntity);
		System.out.println(footballManagerRepository.save(footballTeamEntity).toString());
		
		ResponseEntity<FootballTeamDto> response = (ResponseEntity<FootballTeamDto>) footballManagerService.getTeam(newTeam.getNombre());
		when(footballManagerRepository.findByNombre(newTeam.getNombre())).thenReturn(footballTeamEntity);
		System.out.println(response);
		assertEquals( new ResponseEntity<>(footballTeamEntity, HttpStatus.OK), response);
	}


}
