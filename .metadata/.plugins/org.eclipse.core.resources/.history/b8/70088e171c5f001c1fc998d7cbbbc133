package com.accessProject.footballManager.services;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.accessProject.footballManager.data.FootballManagerRepository;
import com.accessProject.footballManager.data.FootballTeamEntity;
import com.accessProject.footballManager.shared.FootballTeamDto;
import com.accessProject.footballManager.shared.ResponseDto;

@Service
public class FootballTeamServiceImp implements FootballManagerService {

	@Autowired
	FootballManagerRepository footballManagerRepository;

	@Override
	public ResponseEntity<?> createTeam(FootballTeamDto teamDetails) {
		switch (teamDetails.getDivision()) {
		case 1:
			if (teamDetails.getCapacidad() < 50000) {
				return new ResponseEntity<>(
						new ResponseDto("Un equipo de primera división requiere al menos 50000 de capacidad"),
						HttpStatus.BAD_REQUEST);
			}
		case 2:
			if (teamDetails.getCapacidad() < 10000) {
				return new ResponseEntity<>(
						new ResponseDto("Un equipo de segunda división requiere al menos 10000 de capacidad"),
						HttpStatus.BAD_REQUEST);
			}
		case 3:
			if (teamDetails.getCapacidad() < 3000) {
				return new ResponseEntity<>(
						new ResponseDto("Un equipo de tercera división requiere al menos 3000 de capacidad"),
						HttpStatus.BAD_REQUEST);
			}

		}
		teamDetails.setEquipoId(UUID.randomUUID().toString());

		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		FootballTeamEntity footballTeamEntity = modelMapper.map(teamDetails, FootballTeamEntity.class);

		FootballTeamDto returnValue = modelMapper.map(footballManagerRepository.save(footballTeamEntity),
				FootballTeamDto.class);

		return new ResponseEntity<>(returnValue, HttpStatus.OK);
	}

	@Override
	public FootballTeamDto getTeam(String teamName) {
		ModelMapper modelMapper = new ModelMapper();
		FootballTeamDto returnValue = modelMapper.map(footballManagerRepository.findByNombre(teamName),
				FootballTeamDto.class);

		return returnValue;
	}

	@Override
	public ResponseEntity<?> getAllTeams() {
		try {
			Iterable<FootballTeamEntity> entityList = footballManagerRepository.findAll();
			
			List<FootballTeamDto> returnValue = new ArrayList<FootballTeamDto>();
			ModelMapper modelMapper = new ModelMapper();
			
			for(FootballTeamEntity elem: entityList) {
				FootballTeamDto dto = modelMapper.map(elem, FootballTeamDto.class);;
				returnValue.add(dto);	
			}
			return new ResponseEntity<>(returnValue, HttpStatus.OK);
		}
		catch(Exception e) {
			return new ResponseEntity<>(new ResponseDto("Error en el servidor"),HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
